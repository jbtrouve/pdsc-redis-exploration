#!/bin/bash

DBNAME=mycrdb

declare -A  IP U P FQDN URL INGRESS_DB_SUFFIX REPL_EP REPL_TLS_SNI

SCRIPT=go-build-aa-database
echo "# This is a generated script" >$SCRIPT

CMD="crdb-cli crdb create --name $DBNAME --password $DBNAME --memory-size 1000m --encryption yes --causal-consistency true  --shards-count 3 --replication true "

for LOC in 1 2 ; do
	. ./set-site-parameters $LOC >/dev/null 2>&1
	IP[$LOC]=$(kubectl get service/ingress-nginx-controller -o yaml -n ingress-nginx | grep ip: | awk '{print $NF}')
	U[$LOC]=$(kubectl get secret rec-$SITE -o jsonpath='{.data.username}' | base64 --decode)
	P[$LOC]=$(kubectl get secret rec-$SITE -o jsonpath='{.data.password}' | base64 --decode)
	FQDN[$LOC]=$(curl -s -k https://api.$SITE.${IP[$LOC]}.nip.io/v1/cluster -u "${U[$LOC]}:${P[$LOC]}" -H "Content-Type: application/json" | jq '.name' | tr -d '"'  )
	URL[$LOC]=https://$(kubectl get rec -o yaml | awk '$1 == "apiIngressUrl:" {print $NF}')
	INGRESS_DB_SUFFIX[$LOC]=$(kubectl get rec -o yaml | awk '$1 == "dbIngressSuffix:" {print $NF}')

	REPL_EP[$LOC]=${DBNAME}${INGRESS_DB_SUFFIX[$LOC]}:443
	REPL_TLS_SNI[$LOC]=${DBNAME}${INGRESS_DB_SUFFIX[$LOC]}

	echo "Reg.$LOC : IP=${IP[$LOC]} U=${U[$LOC]} P=${P[$LOC]} "
 	echo "        FQDN=${FQDN[$LOC]} URL=${URL[$LOC]}"
	echo "        REPLICATION_ENDPOINT= ${REPL_EP[$LOC]}"
	echo "        REPLICATION_TLS_SNI= ${REPL_TLS_SNI[$LOC]}"
	echo curl -s -k https://api.$SITE.${IP[$LOC]}.nip.io/v1/cluster -u \"${U[$LOC]}:${P[$LOC]}\" -H 'Content-Type: application/json' 

    CMD="$CMD --instance fqdn=${FQDN[$LOC]},url=${URL[$LOC]},username=${U[$LOC]},password=${P[$LOC]},replication_endpoint=${REPL_EP[$LOC]},replication_tls_sni=${REPL_TLS_SNI[$LOC]}"

    echo "    . ./set-site-parameters $LOC  >/dev/null 2>&1
    set -x
    kubectl exec -it rec-r${LOC}-0 -- rladmin tune cluster default_shards_placement sparse
    set +x" >>$SCRIPT

done

echo -e "
. ./set-site-parameters 1  >/dev/null 2>&1
kubectl exec -it rec-r1-0 -- $CMD
" >> $SCRIPT
chmod +x $SCRIPT

echo -e "\n\nRun ./$SCRIPT "